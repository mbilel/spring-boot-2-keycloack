package com.example.microservice.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
	
@RestController
@RequestMapping("/public")
public class PublicService {
	private Logger LOGGER = LoggerFactory.getLogger(MicroService.class);
	
	@Value("${file.uploadDir}")
	 private  String UPLOADED_FOLDER;
	
	@Value("${API_KEY_ENV}")
	 private  String envVariable1;
	@Value("${LANGUAGE_ENV}")
	 private  String language;
	 
	@PostMapping("/upload")
	public ResponseEntity<String> uploadData(@RequestParam("file") MultipartFile file ,HttpServletResponse response) throws Exception {

        try {

            // Get the file and save it somewhere
            byte[] bytes = file.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());
            Files.write(path, bytes);
            response.sendRedirect("/public/upload_success.html");

        } catch (IOException e) {
            e.printStackTrace();
        }
		// Do processing with uploaded file data in Service layer

		return new ResponseEntity<String>(file.getOriginalFilename(), HttpStatus.OK);
	}

	
	@GetMapping("/files")
	public ResponseEntity<String> getFilesNames() throws Exception {
		String listString = null;
		try (Stream<Path> walk = Files.walk(Paths.get(UPLOADED_FOLDER))) {

			List<String> result = walk.filter(Files::isRegularFile)
					.map(x -> x.toString()).collect(Collectors.toList());

	
			listString = String.join("<br>", result);
			listString += "<br> First eznv variable" + envVariable1;
			listString += "<br> Language: " + language;
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new ResponseEntity<String>(listString, HttpStatus.OK);
	}

}
